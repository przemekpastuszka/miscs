let length = \xs -> if null xs then 0
                    else 1 + length (tail xs);
let merge = \xs -> \ys ->
            if null xs then ys
            else if null ys then xs
                else
                    let h1 = head xs;
                    let h2 = head ys;
                    if h1 < h2 then
                         h1:(merge (tail xs) ys)
                    else h2:(merge xs (tail ys));
let split = \xs -> if null xs then [[],[]]
                   else if (length xs) = 1 then [xs,[]]
                   else let rest = tail (tail xs);
                   [ (head xs) : (head (split rest)),
                     (head (tail xs)) : (head (tail (split rest)))];
let mergesort = \xs -> if null xs then []
                       else if length xs = 1 then xs
                       else
                       let a = head (split xs);
                       let b = head (tail (split xs));
                       let a1 = mergesort a;
                       let a2 = mergesort b;
                       merge a1 a2;
mergesort [1,3,4,5,1,2,3,0,7,6,1,0,3] 
